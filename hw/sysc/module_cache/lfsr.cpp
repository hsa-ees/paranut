/*************************************************************************

  This file is part of the ParaNut project.

  Copyright (C) 2010-2022 Gundolf Kiefer <gundolf.kiefer@hs-augsburg.de>
                          Christian H. Meyer <christian.meyer@hs-augsburg.de>
      Hochschule Augsburg, University of Applied Sciences

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.

  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation and/or
     other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 *************************************************************************/


#include "lfsr.h"


// ******************** prime polynomials ********************


int polys_available[MAXLFSR - 1] = {
    1,  2,  2,  6,  6,  16, 16, //  2..8
    16, 16, 16, 16, 16, 16, 16, 16, //  9..16
    16, 16, 16, 16, 16, 16, 16, 14, // 17..24
    16, 16, 16, 16, 16, 16, 16, 16, // 25..32
};


unsigned int prime_poly_list_few_xors[MAXLFSR - 1][16] = {

    // degree 2...
    { 0x00000003 },

    // degree 3...
    { 0x00000003, 0x00000005 },

    // degree 4...
    { 0x00000003, 0x00000009 },

    // degree 5...
    { 0x00000005, 0x00000009, 0x0000000f, 0x00000017, 0x0000001b, 0x0000001d },

    // degree 6...
    { 0x00000003, 0x0000001b, 0x00000021, 0x00000027, 0x0000002d, 0x00000033 },

    // degree 7...
    { 0x00000003, 0x00000009, 0x0000000f, 0x00000011, 0x0000001d, 0x0000002b, 0x00000039, 0x0000003f,
      0x00000041, 0x0000004b, 0x0000004d, 0x00000053, 0x00000055, 0x00000065, 0x00000071, 0x00000077 },

    // degree 8...
    { 0x0000001d, 0x0000002b, 0x0000002d, 0x0000005f, 0x0000004d, 0x00000063, 0x00000065, 0x00000069,
      0x00000071, 0x0000008d, 0x00000087, 0x000000a9, 0x000000c3, 0x000000cf, 0x000000e7, 0x000000f5 },

    // degree 9...
    { 0x00000011, 0x0000002d, 0x00000059, 0x00000069, 0x00000077, 0x00000095, 0x000000d1, 0x000000db,
      0x00000113, 0x00000131, 0x00000161, 0x00000185, 0x0000018f, 0x000001b9, 0x000001e3, 0x000001e9 },

    // degree 10...
    { 0x00000009, 0x0000001b, 0x0000006f, 0x000000d7, 0x00000081, 0x0000010d, 0x00000119, 0x00000131,
      0x0000018f, 0x000001a1, 0x000001c7, 0x00000213, 0x00000215, 0x00000223, 0x000002c1, 0x00000393 },

    // degree 11...
    { 0x00000005, 0x0000002b, 0x00000063, 0x0000008d, 0x00000113, 0x00000125, 0x00000145, 0x00000149,
      0x00000201, 0x00000207, 0x00000213, 0x00000215, 0x00000291, 0x00000341, 0x0000040d, 0x00000419 },

    // degree 12...
    { 0x00000053, 0x00000069, 0x00000099, 0x000000d1, 0x00000123, 0x00000161, 0x00000185, 0x00000225,
      0x000002c1, 0x00000321, 0x00000407, 0x000006a0, 0x00000891, 0x00000941, 0x00000c05, 0x00000c11 },

    // degree 13...
    { 0x0000001b, 0x0000008b, 0x00000143, 0x00000243, 0x0000025b, 0x00000289, 0x00000425, 0x00000521,
      0x00000941, 0x00000c21, 0x00001007, 0x00001019, 0x000010a1, 0x00001209, 0x00001301, 0x00001601 },

    // degree 14...
    { 0x0000002b, 0x00000053, 0x00000143, 0x00000309, 0x00000443, 0x00000813, 0x00000843, 0x00000c81,
      0x000010a1, 0x00001803, 0x0000200d, 0x00002015, 0x00002141, 0x00002501, 0x00002601, 0x00002a01 },

    // degree 15...
    { 0x00000003, 0x00000011, 0x00000081, 0x00000101, 0x00000611, 0x00000801, 0x00000909, 0x00001091,
      0x0000200b, 0x00002501, 0x00003401, 0x00004001, 0x00004007, 0x00004301, 0x00005005, 0x00006003 },

    // degree 16...
    { 0x0000002d, 0x0000026d, 0x00000285, 0x00000483, 0x00000489, 0x00000861, 0x00000c21, 0x0000100b,
      0x00001241, 0x00002241, 0x00004281, 0x00006801, 0x00008241, 0x0000900f, 0x0000a011, 0x0000e013 },

    // degree 17...
    { 0x00000009, 0x00000021, 0x00000041, 0x00000801, 0x00001001, 0x00002023, 0x00004001, 0x00004091,
      0x00006401, 0x0000a801, 0x0000d001, 0x0001000d, 0x00010031, 0x00010601, 0x00013001, 0x0001c001 },

    // degree 18...
    { 0x00000027, 0x00000081, 0x00000489, 0x000004a1, 0x00000801, 0x00000f0f, 0x00002901, 0x00002bc9,
      0x00004023, 0x00008025, 0x00008901, 0x00009bc1, 0x00012009, 0x00022011, 0x00032001, 0x00038781 },

    // degree 19...
    { 0x00000027, 0x00000063, 0x000003c9, 0x0000168a, 0x00002139, 0x00008441, 0x0000a201, 0x00010013,
      0x00010025, 0x00010049, 0x00010121, 0x00011201, 0x00021401, 0x0002f043, 0x00040181, 0x00046001 },

    // degree 20...
    { 0x00000009, 0x00000229, 0x00001809, 0x00003021, 0x00010023, 0x00010089, 0x00012201, 0x00018801,
      0x00020001, 0x00020049, 0x00022011, 0x00028801, 0x00080019, 0x000800c1, 0x00080301, 0x00088011 },

    // degree 21...
    { 0x00000005, 0x00004221, 0x00008105, 0x00011081, 0x00018401, 0x00020045, 0x00024401, 0x00040013,
      0x00040481, 0x00040901, 0x00080001, 0x000800a1, 0x00082041, 0x00088011, 0x00100061, 0x00120009 },

    // degree 22...
    { 0x00000003, 0x00002409, 0x00020109, 0x00022101, 0x00060003, 0x00081201, 0x00084021, 0x00089001,
      0x000a4001, 0x0010000b, 0x00100a01, 0x00200001, 0x00200031, 0x00200601, 0x00218001, 0x00280005 },

    // degree 23...
    { 0x00000021, 0x00000201, 0x00004001, 0x00040001, 0x00050005, 0x002000a1, 0x00200501, 0x00400007,
      0x00400031, 0x00400061, 0x00400181, 0x00400c01, 0x0040c001, 0x00418001, 0x004c0001, 0x00600003 },

    // degree 24...
    { 0x0000001b, 0x00000087, 0x0000a011, 0x00010281, 0x00028101, 0x00100a01, 0x00180003,
      0x00800031, 0x00b00001, 0x00c20001, 0x001ba555, 0x002fe633, 0x00554bb1, 0x0098cfe9 },

    // degree 25...
    { 0x00000009, 0x00000081, 0x00040001, 0x00050005, 0x00400001, 0x00500005, 0x00800029, 0x00800281,
      0x00800a01, 0x00801401, 0x008a0001, 0x00d00001, 0x01000601, 0x01000c01, 0x01003001, 0x01c00001 },

    // degree 26...
    { 0x00000047, 0x00000183, 0x00220011, 0x00221001, 0x00280005, 0x00284001, 0x00400221, 0x00800013,
      0x00848001, 0x00890001, 0x010000a1, 0x010a0001, 0x02001801, 0x020c0001, 0x02400009, 0x03100001 },

    // degree 27...
    { 0x00000027, 0x00000183, 0x00800045, 0x00800221, 0x00844001, 0x01000025, 0x01002401, 0x01480001,
      0x02001401, 0x02014001, 0x02200011, 0x02400009, 0x03000003, 0x0400000d, 0x04180001, 0x06400001 },

    // degree 28...
    { 0x00000009, 0x00000201, 0x00002001, 0x00008001, 0x00080001, 0x00402081, 0x00408201, 0x00800085,
      0x00800841, 0x00808401, 0x00810801, 0x01000023, 0x01088001, 0x02000001, 0x08000031, 0x08000181 },

    // degree 29...
    { 0x00000005, 0x00280005, 0x01000085, 0x02000045, 0x04000025, 0x04001201, 0x04012001, 0x04090001,
      0x08000001, 0x08000501, 0x08000a01, 0x08140001, 0x08400021, 0x08800011, 0x09000009, 0x10c00001 },

    // degree 30...
    { 0x00000053, 0x00018003, 0x00100803, 0x00902001, 0x00800205, 0x00800103, 0x01000821, 0x04008801,
      0x04022001, 0x08000121, 0x08900001, 0x10200081, 0x2000c001, 0x20080401, 0x20400081, 0x25000001 },

    // degree 31...
    { 0x00000009, 0x00000041, 0x00000081, 0x00002001, 0x02000001, 0x10000001, 0x20000501, 0x20002801,
      0x2000a001, 0x20280001, 0x22800001, 0x2a000001, 0x400000c1, 0x40006001, 0x40600001, 0x70000001 },

    // degree 32...
    { 0x000000af, 0x00012009, 0x000a0011, 0x00840021, 0x02002041, 0x02408001, 0x04000821, 0x04080081,
      0x08004201, 0x08200041, 0x0a100001, 0x1000a001, 0x18000003, 0x20090001, 0x80000031, 0xea000001 }
};


unsigned int prime_poly_list_many_xors[MAXLFSR - 1][16] = {

    // degree 2...
    { 0x00000003 },

    // degree 3...
    { 0x00000003, 0x00000005 },

    // degree 4...
    { 0x00000003, 0x00000009 },

    // degree 5...
    { 0x0000000f, 0x00000017, 0x0000001b, 0x0000001d, 0x00000005, 0x00000009 },

    // degree 6...
    { 0x00000027, 0x0000001b, 0x00000033, 0x0000002d, 0x00000003, 0x00000021 },

    // degree 7...
    { 0x0000003f, 0x0000006f, 0x00000077, 0x0000007d, 0x0000000f, 0x00000027, 0x0000002b, 0x0000004b,
      0x00000053, 0x0000001d, 0x00000055, 0x00000065, 0x00000039, 0x00000071, 0x00000003, 0x00000009 },

    // degree 8...
    { 0x0000005f, 0x000000cf, 0x000000e7, 0x000000f5, 0x00000087, 0x0000002b, 0x00000063, 0x000000c3,
      0x0000001d, 0x0000002d, 0x0000004d, 0x0000008d, 0x00000065, 0x00000069, 0x000000a9, 0x00000071 },

    // degree 9...
    { 0x0000017f, 0x000001fb, 0x0000005f, 0x0000011f, 0x0000006f, 0x000000af, 0x000000cf, 0x0000014f,
      0x0000018f, 0x00000077, 0x000000b7, 0x000001c7, 0x0000013b, 0x000000db, 0x0000015b, 0x0000016b },

    // degree 10...
    { 0x000000ff, 0x0000027f, 0x000002df, 0x000001f7, 0x000001fb, 0x000003db, 0x000003f3, 0x000002fd,
      0x0000037d, 0x000003f9, 0x0000006f, 0x0000024f, 0x0000018f, 0x00000237, 0x000000d7, 0x00000157 },

    // degree 11...
    { 0x0000017f, 0x0000027f, 0x000004bf, 0x0000033f, 0x000002df, 0x0000035f, 0x0000065f, 0x0000059f,
      0x0000069f, 0x000002ef, 0x0000036f, 0x0000056f, 0x000003af, 0x000006cf, 0x000001f7, 0x000004f7 },

    // degree 12...
    { 0x000007bf, 0x00000bbf, 0x00000fbb, 0x00000fbd, 0x0000027f, 0x0000033f, 0x000001df, 0x00000c9f,
      0x00000b1f, 0x000008ef, 0x00000e2f, 0x000009cf, 0x00000ccf, 0x00000e8f, 0x000005d7, 0x00000b57 },

    // degree 13...
    { 0x00000fff, 0x00001bff, 0x00001ff7, 0x00001ffd, 0x000011ff, 0x00000b7f, 0x0000157f, 0x00001abf,
      0x00000f3f, 0x00001b3f, 0x00001e3f, 0x000007df, 0x00000edf, 0x00001adf, 0x00000f5f, 0x00001f1f },

    // degree 14...
    { 0x000033ff, 0x00003cff, 0x00003e7f, 0x00003f3f, 0x00001fdf, 0x00002fdf, 0x00003f9f, 0x00003fe7,
      0x00003dfb, 0x00003dfd, 0x000005ff, 0x000011ff, 0x000018ff, 0x000028ff, 0x0000077f, 0x0000157f },

    // degree 15...
    { 0x00003fff, 0x000077ff, 0x00007eff, 0x00007f7f, 0x00007fef, 0x00007ffd, 0x000017ff, 0x00001bff,
      0x000063ff, 0x00004dff, 0x00004eff, 0x000072ff, 0x00006cff, 0x0000577f, 0x00003d7f, 0x00003e7f },

    // degree 16...
    { 0x00006fff, 0x0000afff, 0x0000fb7f, 0x0000fdbf, 0x0000bfdf, 0x0000efdf, 0x0000dfef, 0x0000f7ef,
      0x0000eff7, 0x0000f7fb, 0x0000ffeb, 0x0000ffed, 0x00004bff, 0x00001dff, 0x000039ff, 0x000059ff },

    // degree 17...
    { 0x0001dfff, 0x0001efff, 0x0001ffdf, 0x0001ffef, 0x00014fff, 0x0000d7ff, 0x0001cbff, 0x00015dff,
      0x0001adff, 0x0001cdff, 0x000175ff, 0x0001e5ff, 0x0001d9ff, 0x0000beff, 0x00013eff, 0x0001d6ff },

    // degree 18...
    { 0x00033fff, 0x0001f7ff, 0x0003dbff, 0x00037dff, 0x0003edff, 0x0003beff, 0x00037f7f, 0x0003df7f,
      0x0002ffbf, 0x0003dfbf, 0x0003fdbf, 0x00037fdf, 0x0003efdf, 0x0003f7df, 0x0003fedf, 0x0003fbef },

    // degree 19...
    { 0x0004bfff, 0x0001dfff, 0x00059fff, 0x0005cfff, 0x000677ff, 0x0003b7ff, 0x0006b7ff, 0x000797ff,
      0x0005e7ff, 0x00057bff, 0x0005bbff, 0x00075bff, 0x0003ebff, 0x0007cbff, 0x0003f3ff, 0x0005f3ff },

    // degree 20...
    { 0x0003ffff, 0x000d7fff, 0x000e7fff, 0x000ddfff, 0x000f9fff, 0x000ef7ff, 0x000fd7ff, 0x000fe7ff,
      0x000dfdff, 0x000fddff, 0x000fdeff, 0x000ffcff, 0x000fef7f, 0x000ff77f, 0x000ffd7f, 0x000fff3f },

    // degree 21...
    { 0x00137fff, 0x00197fff, 0x001c7fff, 0x0013bfff, 0x0015bfff, 0x000ddfff, 0x001cdfff, 0x000f5fff,
      0x00179fff, 0x001f1fff, 0x0015efff, 0x001cefff, 0x00176fff, 0x001d6fff, 0x001bcfff, 0x000ef7ff },

    // degree 22...
    { 0x001bffff, 0x001dffff, 0x002effff, 0x002f7fff, 0x002fefff, 0x003df7ff, 0x002ffdff, 0x003f7dff,
      0x003f7eff, 0x003fbf7f, 0x003fdf7f, 0x001fffdf, 0x002fffdf, 0x003ff7df, 0x0037ffef, 0x001ffff7 },

    // degree 23...
    { 0x003fffff, 0x007dffff, 0x007f7fff, 0x007fdfff, 0x007ffbff, 0x007ffeff, 0x007fffbf, 0x007ffffd,
      0x0036ffff, 0x003affff, 0x005affff, 0x0074ffff, 0x00767fff, 0x002fbfff, 0x0037bfff, 0x0067bfff },

    // degree 24...
    { 0x00ebffff, 0x007dffff, 0x007f7fff, 0x00bf7fff, 0x007fbfff, 0x00fefdff, 0x00ff7eff, 0x00ffffaf,
      0x00fffdfb, 0x00fffbfd, 0x00fffdfd, 0x00ffff7d, 0x0063ffff, 0x0055ffff, 0x0095ffff, 0x00bc7fff },

    // degree 25...
    { 0x01dfffff, 0x01feffff, 0x01fffdff, 0x01ffffef, 0x003fffff, 0x00afffff, 0x012fffff, 0x0167ffff,
      0x019bffff, 0x01b3ffff, 0x01e3ffff, 0x013dffff, 0x01d5ffff, 0x01e5ffff, 0x01e9ffff, 0x00beffff },

    // degree 26...
    { 0x02efffff, 0x01fbffff, 0x037bffff, 0x02fdffff, 0x03ef7fff, 0x03dfbfff, 0x03ff5fff, 0x037fefff,
      0x03f7efff, 0x03bff7ff, 0x03f7f7ff, 0x03ffd7ff, 0x037ffdff, 0x03ff7f7f, 0x03ffbf7f, 0x03fff7bf },

    // degree 27...
    { 0x047fffff, 0x055fffff, 0x036fffff, 0x03b7ffff, 0x0737ffff, 0x03d7ffff, 0x06d7ffff, 0x0757ffff,
      0x05e7ffff, 0x02fbffff, 0x04fbffff, 0x03f3ffff, 0x057dffff, 0x076dffff, 0x05f5ffff, 0x06f9ffff },

    // degree 28...
    { 0x0dfdffff, 0x0fddffff, 0x0ff6ffff, 0x0effbfff, 0x0fdfbfff, 0x0fbfdfff, 0x0fefdfff, 0x0efff7ff,
      0x0f7ff7ff, 0x0fffedff, 0x0fff7eff, 0x0fffbf7f, 0x0ffff77f, 0x0fff7fbf, 0x0ffdffdf, 0x0ffdffef },

    // degree 29...
    { 0x1f7fffff, 0x1ffbffff, 0x1ffff7ff, 0x1fffffbf, 0x05ffffff, 0x09ffffff, 0x0b7fffff, 0x1a7fffff,
      0x16bfffff, 0x0f3fffff, 0x15dfffff, 0x1bafffff, 0x0ef7ffff, 0x1cf7ffff, 0x1d77ffff, 0x0fb7ffff },

    // degree 30...
    { 0x3dbfffff, 0x1fdfffff, 0x3f6fffff, 0x37fdffff, 0x3dfeffff, 0x3dff7fff, 0x3fdfbfff, 0x3ff7dfff,
      0x3fefefff, 0x3feff7ff, 0x3ffdf7ff, 0x3ff7fbff, 0x3ffbfbff, 0x3dfffdff, 0x3ffefdff, 0x3f7ffeff },

    // degree 31...
    { 0x6fffffff, 0x7dffffff, 0x7effffff, 0x7ffbffff, 0x7fffdfff, 0x7fffff7f, 0x7fffffbf, 0x7ffffff7,
      0x0fffffff, 0x1bffffff, 0x63ffffff, 0x35ffffff, 0x55ffffff, 0x3cffffff, 0x74ffffff, 0x677fffff },

    // degree 32...
    { 0x5fffffff, 0x77ffffff, 0xd7ffffff, 0xfef7ffff, 0x7ffdffff, 0x7fffefff, 0xdfffefff, 0xf7fff7ff,
      0xdffffdff, 0xffffdeff, 0x7fffffdf, 0xffdfffdf, 0xff7ffff7, 0xffeffff7, 0xffffffd7, 0xf7fffffd }
};


// ********************* Functions ************************


unsigned int GetPrimePoly (int degree, int select) {
    select %= 32;
    if (select < 16) return prime_poly_list_few_xors[degree - 2][select % polys_available[degree - 2]];
    select -= 16;
    return prime_poly_list_many_xors[degree - 2][select % polys_available[degree - 2]];
}

template<int W> 
sc_uint<W> GetNextLfsrState (sc_uint<W> state) {
    bool old_bit0;
    unsigned int poly;
    
    poly = GetPrimePoly(W, 0);
    old_bit0 = state & 1;
    if (old_bit0) state ^= poly;
    return (state >> 1) | (old_bit0 << (W - 1));
}
template sc_uint<8> GetNextLfsrState<8> (sc_uint<8> state);
template sc_uint<16> GetNextLfsrState<16> (sc_uint<16> state);

template <typename T>
static int GetOnes (T word) {
    int ret = 0;

    while (word) {
        ret += word & 1;
        word >>= 1;
    }
    return ret;
}