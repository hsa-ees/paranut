###########################################################################
#
#  This file is part of the ParaNut project.
#
#  Copyright (C) 2023 Lukas Bauer <lukas.bauer@hs-augsburg.de>
#      Efficient Embedded Systems Group
#      Hochschule Augsburg, University of Applied Sciences
#
#  Description:
#      This script can test the whole debug infrastructure in simulation.
#      It is a gdb command file that is run when using the sh script pn-debug-test
#
#  --------------------- LICENSE -----------------------------------------------
#  Redistribution and use in source and binary forms, with or without modification,
#  are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice, this
#     list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation and/or
#     other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###########################################################################



tar ext :3333
set tdesc filename tools/etc/gdb_csr_priv{privilege}.xml

# make a breakpoint and jumping to it

b hello_newlib.c:45
continue

# reading all csr registers
info registers csr

# runing three printout cycles
continue
continue
continue

# testing the read of a single csr register
p/x $misa

# setting the counter variable back to 1
p n
set var n = 1
p n



# changing the first letter in the outputstring
set var hello[0] = 'h'

# running three printout cycles
continue
continue
continue


#testing register read/write 1000
set $counter = 0
while ($counter < 1000)
    set $t1 = $counter
    print $t1
    set $counter = $counter + 1
end


# Test memory read/write

set $counter = 0
set $symbol = 0
set $pos = 0
while $counter < 1000
    if $pos != 11
        set var hello[$pos] = 0x41 + $symbol
        if $symbol != 25
            set $symbol = $symbol + 1
        else
            set $symbol = 0
            set $pos = $pos + 1
        end
    else
        set $pos = 0
    end
    set $counter = $counter + 1
    print hello[$pos]
end



# quiting the script
quit
y