#!/bin/bash

###########################################################################
#
#  This file is part of the ParaNut project.
#
#  Copyright (C) 2020-2021 Alexander Bahle <alexander.bahle@hs-augsburg.de>
#                          Michael Schaeferling <michael.schaeferling@hs-augsburg.de>
#      Efficient Embedded Systems Group
#      Hochschule Augsburg, University of Applied Sciences
#
#  Description:
#    Create a ParaNut project directory.
#
#  --------------------- LICENSE ------------------------------------------
#  Redistribution and use in source and binary forms, with or without modification,
#  are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice, this
#     list of conditions and the SOFTWARE_SRC=mode1_demo OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###########################################################################


VERSION=0.9

TOOL="${0##*/}"
CMDLINE="${0##*/} $@"



############################## Options (defaults) ##############################

NEWPROJECT_PATH="./paranut"
RUST_FLAG=false 



############################## Usage and error helpers #########################

check_paranut_env () {
  if [ -z $PARANUT_HOME ]; then
    echo "ERROR: Environment variable TOOLS_DIR is not set.";
    echo "  Source <ParaNut-Dir>/settings.sh first to use this tool."
    exit 1
  fi
}


usage () {
  echo "Usage: $TOOL -r -c [<project_folder>]"
  echo
  echo "Create a ParaNut project directory."
  echo
  echo "Options:"
  echo
  echo "  -c [<project_folder>]"
  echo "     Create a new ParaNut project in the specified folder (defaults to '$NEWPROJECT_PATH')."
  echo "  -r "
  echo "     copy the sw/rust_intern_crates in the specified folder (defaults to '$NEWPROJECT_PATH'/sw)."
}


error () {
  echo "ERROR: $1"
  echo
  usage
  exit
}



############################## create_project script ######################################

create_project () {

  # Setup variables...
  PARANUT_HOME="$1"
  NEWPROJECT_PATH="$2"

  # import paranut directory structure
  eval $(make -C $PARANUT_HOME --silent get-variables)

  # Check if project path/file already exists:
  if [ -e $NEWPROJECT_PATH ]; then
    echo "ERROR: Path '$NEWPROJECT_PATH' already exists."
    exit
  fi

  echo "Creating new ParaNut project in '$NEWPROJECT_PATH'."
  mkdir -p $NEWPROJECT_PATH
  cd $NEWPROJECT_PATH

  #echo "Populating ..."
  # Copy template files
  #echo " - Project template files (README and Makefile)."
  cp -t . $TOOLS_DIR/share/newproject/*
  
  # copy config.mk for reference and make it read only
  cp $PARANUT_HOME/config.mk config.reference.mk 
  chmod 444 config.reference.mk 

  # Copy config and settings file
  #echo " - configuration."
  cp -r $PNS_DIR/* .

  # Add Version Reference
  #echo " - version reference."
  cp $PARANUT_HOME/version.env .

}



############################## Main ############################################# Sanity checks...

# Print usage on empty call...
if [[ "$1" == "" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
  usage
  exit 0
fi


# Sanity checks...

# Check for ParaNut environment...
check_paranut_env

# Parse known options...
PARSE_OPTS="1"
while [[ $PARSE_OPTS == "1" ]]; do 
  case "$1" in
    # Help/Usage
    -h|--help)
      usage
      exit 0
      ;;

    -c)
      if [[ "$2" == "" ]]; then
        shift 1
      else
        NEWPROJECT_PATH="./$2/"
        shift 2
      fi
      ;;
    -r)
      RUST_FLAG=true 
      shift 1
      ;;

    -*)
      error "Unknown option '$1'"
      ;;
    *)
      PARSE_OPTS="0"
      ;;
  esac
done

# Go ahead...
create_project $PARANUT_HOME $NEWPROJECT_PATH
