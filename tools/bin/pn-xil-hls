#!/bin/bash

###########################################################################
#
#  This file is part of the ParaNut project.
#
#  Copyright (C) 2020-2021 Michael Schaeferling <michael.schaeferling@hs-augsburg.de>
#                          Gundolf Kiefer <gundolf.kiefer@hs-augsburg.de>
#      Hochschule Augsburg, University of Applied Sciences
#
#  --------------------- LICENSE ------------------------------------------
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################


VERSION=0.9

TOOL="${0##*/}"
CMDLINE="${0##*/} $@"



############################## Options (defaults) ##############################

PART="xc7z010clg400-1"          # Zynq 7010 on ZYBO
OUTSPEC="s"                     # Output specification (default: synthesis result)
CFLAGS="#NONE#"



############################## Usage and error helpers #########################

check_xilinx_env () {
  if [[ -z "$XILINX_VIVADO" ]]; then
    echo "ERROR: Environment variable XILINX_VIVADO is not set."
    echo "  This tool uses Xilinx Vivado synthesis tools."
    echo "  Information on supported Vivado versions can be found in <README.md> in"
    echo "  Section Supported Xilinx Vivado Versions."
    echo "  For example, to enable Vivado 2019.1 installed in /opt/Xilinx/Vivado/2019.1, call:"
    echo "  $ . /opt/Xilinx/Vivado/2019.1/settings64.sh"
    exit 1
  fi
}


usage () {
  echo "Usage: $TOOL [<options>] <HLS source>"
  echo
  echo "Synthesize a design using Xilinx Vivado HLS."
  echo
  echo "  For the input file format of <HLS source>, the following formats"
  echo "  are presently supported:"
  echo "  - SystemC (*.cpp)"
  echo "  The top-level entity must match the filename (without suffix;"
  echo "  case does not matter)."
  echo
  echo "General options:"
  echo
  echo "  -p | --part <part or board name>"
  echo "      Select the FPGA part either by its exact name or by a board name."
  echo "      Supported board names are: zybo, zedboard, microzed."
  echo "      [Default = $PART (ZYBO)]."
  echo
  echo "Output options:"
  echo
  echo "  -s | --synthesize"
  echo "      Perform high level synthesis (default, always on)."
  echo
  echo "  -i | --ipcore [<IPcore name>]"
  echo "      Generate a Vivado IP Core."
  echo
  echo "Generated outputs (depending on options):"
  echo
  echo "  <HLS source>-hls/*:             results and logs as follows"
  echo
  echo "    vhdl_out/:                    generated VHDL code"
  echo "    ip_out/:                      generated IP core"
  echo
  echo "    <HLS source>-hls.tcl:         TCL script doing all this"
  echo "    <HLS source>.log:             copy of the console output"
  echo
}


error () {
  echo "ERROR: $1"
  echo
  usage
  exit 3
}



############################## Helpers #########################################


print_tcl_head () {
  echo
  echo
  echo
  echo "puts \"\n\n\""
  echo "puts \"###########################################################################\""
  echo "puts \"#\""
  echo "puts \"#          $1\""
  echo "puts \"#\""
  echo "puts \"###########################################################################\""
  echo "puts \"\""
  echo
}






############################## High Level Synthesis #######################################


do_high_level_synthesis () {

    # Setup variables...
    OUTSPEC="$1"
    PART="$2"
    CFLAGS="$3"
    if [[ "$CFLAGS" == "#NONE#" ]]; then
      CFLAGS=""
    fi
    TOP="${4##*/}"    # remove path
    TOP="${TOP%.*}"
    shift 3
    SRC="$@"

    PRJDIR="$TOP-hls"
    SLNDIR="solution1"
    mkdir -p $PRJDIR
    SCRIPT="$PRJDIR/$TOP-hls.tcl"

    VHDLOUTDIR="$PRJDIR/vhdl_out"
    IPOUTDIR="$PRJDIR/ip_out/$IPCORE"

    # Remove all log files that are supposed to be created (to avoid confusion)...
    #   Note: Prospecive output files are not deleted (may be too valuable)..
    rm -f $TOP.log

    # Create high level synthesis script...
    echo "# High Level Synthesis (HLS) script, generated by $TOOL." > $SCRIPT
    echo "#" >> $SCRIPT
    echo "# Command line:         $CMDLINE" >> $SCRIPT
    echo "# Running this script:  vivado_hls $SCRIPT" >> $SCRIPT


    #   ... Project setup ...
    print_tcl_head "Setup project and read sources ..." >> $SCRIPT
    echo "open_project $PRJDIR" >> $SCRIPT
    echo "set_top $TOP" >> $SCRIPT
    if [[ "$CFLAGS" == "" ]]; then
      echo "add_files $SRC" >> $SCRIPT
    else
      echo "add_files $SRC -cflags \"$CFLAGS\"" >> $SCRIPT
    fi
    echo "open_solution \"$SLNDIR\"" >> $SCRIPT
    echo "set_part {$PART} -tool vivado" >> $SCRIPT
    echo "create_clock -period 10 -name default" >> $SCRIPT
    echo "config_rtl -reset_level high -encoding auto -reset none" >> $SCRIPT


    #   ... high level synthesis ...
    print_tcl_head "Synthesize (HLS) design ..." >> $SCRIPT
    echo "csynth_design" >> $SCRIPT

    if [[ "$OUTSPEC" == "si" ]]; then
      print_tcl_head "Generate IP-Core ..." >> $SCRIPT
      echo "export_design -format ip_catalog -display_name $IPCORE -ipname $IPCORE -vendor \"ees.hs-augsburg.de\"" >> $SCRIPT
    fi

    echo "exit" >> $SCRIPT

    # Run Vivado HLS...
    vivado_hls -l $PRJDIR/$TOP.log -f $SCRIPT

    # Copy output files in place ...
    echo "# Copy VHDL output to $VHDLOUTDIR"
    cp -r $PRJDIR/$SLNDIR/impl/vhdl/ $VHDLOUTDIR
    if [[ "$OUTSPEC" == "si" ]]; then
      echo "# Copy IP Core to $IPOUTDIR"
      mkdir -p $IPOUTDIR
      cp -r $PRJDIR/$SLNDIR/impl/ip/component.xml $IPOUTDIR
      cp -r $PRJDIR/$SLNDIR/impl/ip/constraints $IPOUTDIR
      cp -r $PRJDIR/$SLNDIR/impl/ip/hdl $IPOUTDIR
      cp -r $PRJDIR/$SLNDIR/impl/ip/misc $IPOUTDIR
      cp -r $PRJDIR/$SLNDIR/impl/ip/xgui $IPOUTDIR
    fi
}




############################## Main ############################################




# Sanity checks...

# Print usage on empty call...
if [[ "$1" == "" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
  usage
  exit 0
fi

# Check for Vivado environment...
check_xilinx_env



# Parse known options...
PARSE_OPTS="1"
while [[ $PARSE_OPTS == "1" ]]; do
  case "$1" in
    # Help/Usage
    -h|--help)
      usage
      exit 0
      ;;

    -p|--part)           # specify part, either by part or by board name
      case "$2" in
        zybo)     # ZYBO (2016 version)
          PART="xc7z010clg400-1"
          ;;
        zybo_z7-10) # ZYBO-Z7-10
          PART="xc7z010clg400-1"
          ;;
        zybo_z7-20) # ZYBO-Z7-20
          PART="xc7z020clg400-1"
          ;;
        zedboard) # ZedBoard
          PART="xc7z020clg484-1"
          ;;
        microzed) # MicroZed
          PART="xc7z020clg400-1"
          ;;
        *)
          PART="$2"
          ;;
      esac
      if [[ "$PART" != "$2" ]]; then
        echo "Using part '$PART' ($2)"
      fi
      shift 2
      ;;

    -s|--synthesize)
      OUTSPEC="s" # Synthesis
      shift
      ;;

    -i|--ipcore)
      OUTSPEC="si" # Synthesis and IP-Core-Generation
      IPCORE="$2"
      shift 2
      ;;

    -c|--clfags)
      CFLAGS="$2"
      shift 2
      ;;

    -*)
      error "Unknown option '$1'"
      ;;

    *)
      PARSE_OPTS="0"
      ;;

  esac
done


# Go ahead...
do_high_level_synthesis $OUTSPEC $PART $CFLAGS $@
