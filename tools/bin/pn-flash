#!/usr/bin/python3

###########################################################################
#
#  This file is part of the ParaNut project.
#
#  Copyright (C) 2007-2022 Alexander Bahle <alexander.bahle@hs-augsburg.de>
#                          Gundolf Kiefer <gundolf.kiefer@hs-augsburg.de>
#                          Michael Schaeferling <michael.schaeferling@hs-augsburg.de>
#                          Nico Borgsmueller <nico.borgsmueller@hs-augsburg.de>
#      Efficient Embedded Systems Group
#      Hochschule Augsburg, University of Applied Sciences
#
#  Description:
#      A command line tool to program a ParaNut system running on a
#      ZYNQ 7000 platform. First the firmware will be programmed to the
#      ARM processor. The RISC-V software binary will be transfered
#      after that. If specified the FPGA bitfile is also programmed and
#      the UART output of the ParaNut is displayed.
#
#  --------------------- LICENSE -----------------------------------------------
#  Redistribution and use in source and binary forms, with or without modification,
#  are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice, this
#     list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation and/or
#     other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###########################################################################


from string import *
import array
import sys
import os
import select
import serial
import subprocess
import getopt
import cmd
import time
import itertools
import pyudev
import glob


versionMajor = 2
versionMinor = 0
versionRevision = 0


################### Configuration #########################


optSerialDevices = ["/dev/ttyUSB*"]

supportedBoards = { "digilent_generic": { "idVendor":"0403",
                                          "idProduct":"6010",
                                          "iProduct":"Digilent_Adept_USB_Device",
                                          "bInterfaceNumber":b'01'
                                        }
                  }

# Internal options...
optDebug = False    # set to 'True' to enable additional debug output
optInitPeripherals = False
optConsole = False
optLoadFirmwareCommand = \
  "pn-xil-program -r {0:s} {1:s}" \
  "&& rm -fr .Xil pn-xil-program.tcl" \

optLoadBitfileCommand = \
  "pn-xil-program -b {0:s}" \
  "&& rm -fr .Xil pn-xil-program.tcl" \

optElfCheckCmd = "file {0:s} | grep 'ELF' | grep 'RISC-V'"
optObjcopy = "riscv64-unknown-elf-objcopy"
optObjcopyCmd = "{0:s} -S -O binary {1:s} {2:s}"
optObjcopyTmpFile = "objcopy.bin"

optBitfile = ""
optBinary = ""
optInitPeripherals = False
optArgs = []
optAddress = []
optResetNeeded = 0

optNumTries = 3

############################## Helpers #########################################



######################### Board communication ##################################


class ParaNutException (Exception):
  """Exceptions raised inside this tool."""
  pass


class Board:
  serialDev = None
  fastIO = False


  ##### (Un-)connecting and low-level access ... #####


  def assertPresence ():
    """Check if a board is connected and raise an exception if not."""
    if not Board.serialDev: raise ParaNutException ("No ParaNut on board connected")


  def init (writeFirmware = False):
    """Initialize the board connection."""

    Board.serialDev = None

    serialDevices=[]
    for optSerialDevice in optSerialDevices:
      for filename in glob.glob(optSerialDevice):
        serialDevices.append(filename)

    if len(serialDevices) != 0:
      if optDebug: print("Serial devices to check: " + str(serialDevices))

      udevContext = pyudev.Context()

      for devName in serialDevices:
        if not Board.serialDev:


          # USB device sanity check...
          device = pyudev.Devices.from_device_file(udevContext, devName)

          # gets the values from the USB device for older and newer versions of libudev
          deviceValues = {'devIdVendor':[device.get('ID_VENDOR_ID'),
                                                          device.get('ID_USB_VENDOR_ID')],
                                                  'devIdProduct':[device.get('ID_MODEL_ID'),
                                                                  device.get('ID_USB_MODEL_ID')],
                                                  'devProduct':[device.get('ID_MODEL'),
                                                                device.get('ID_USB_MODEL')],
                                                  'devIfNumber': [device.parent.parent.attributes.get('bInterfaceNumber')]}

          # Check all available board types for compatibility:
          for boardCandidate in supportedBoards:
            boardIdVendor  = supportedBoards.get(boardCandidate).get('idVendor')
            boardIdProduct = supportedBoards.get(boardCandidate).get('idProduct')
            boardProduct   = supportedBoards.get(boardCandidate).get('iProduct')
            boardIfNumber  = supportedBoards.get(boardCandidate).get('bInterfaceNumber')

            if boardIdVendor  in deviceValues['devIdVendor'] and \
               boardIdProduct in deviceValues['devIdProduct'] and \
               boardProduct   in deviceValues['devProduct'] and \
               boardIfNumber  in deviceValues['devIfNumber'] :
              selectedBoard = [value for value in deviceValues['devProduct'] if boardProduct == value][0]
              if optDebug: print("USB identity check OK for '" + device.device_node + "' ("+ selectedBoard +"), trying to connect...")

            else:
              if optDebug: print("USB identity check FAILED for '" + device.device_node + "', skipping.")
              continue

            try:
              Board.serialDev = serial.Serial (devName, 115200, timeout = 1)
              print("Connected to '" + devName + "' ("+ selectedBoard +")")
            except:
              Board.serialDev = None

    if not Board.serialDev:
      raise ParaNutException ("Serial device not found (is the board connected?)")
    Board.serialDev.reset_input_buffer ()   # [2018-03-02] This does not work!!

    if writeFirmware:
      # Download firmware...
      print ("Downloading firmware... ", end="", flush=True)
      if optDebug: print("### Download FW command: " + optLoadFirmwareCommand.format (optArgs[0], optArgs[1]))
      ret = subprocess.run (optLoadFirmwareCommand.format (optArgs[0], optArgs[1]),
                shell=True, stdin=subprocess.DEVNULL, stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT, universal_newlines=True, check=False, timeout=120);
      if ret.returncode != 0:
        print ("FAILED!", flush=True)
        print ("\n-------------------- DETAILED ERROR LOG FOLLOWS --------------------\n")
        print (ret.stdout)
        print ("\n-------------------- END OF DETAILED ERROR LOG ---------------------\n")
        raise ParaNutException ("Failed to download the ParaNut firmware")

      print ("OK")

    # For fast systems: Wait 1 second for the Firmware to start before sending over UART
    time.sleep(1.0)

    # Exchange "hello" messages...
    Board.writeCommand ("\x16 ?h {0:x} {1:x} {2:x}".format (versionMajor, versionMinor, versionRevision))
    try:
      ans = Board.readAnswer (optNumTries)
      if ans["prefix"] != '?h': raise KeyError ()
    except KeyError:
      Board.serialDev = None
      raise ParaNutException ("Unable to communicate with the ParaNut firmware")


  def programBitfile (bitfile):
    print ("Downloading bitfile... ", end="", flush=True)
    if optDebug: print("### Download Bitfile command: " + optLoadBitfileCommand.format (bitfile))
    ret = subprocess.run (optLoadBitfileCommand.format (bitfile),
              shell=True, stdin=subprocess.DEVNULL, stdout=subprocess.PIPE,
              stderr=subprocess.STDOUT, universal_newlines=True, check=False, timeout=120);

    if ret.returncode != 0:
      print ("FAILED!", flush=True)
      print ("\n-------------------- DETAILED ERROR LOG FOLLOWS --------------------\n")
      print (ret.stdout)
      print ("\n-------------------- END OF DETAILED ERROR LOG ---------------------\n")
      raise ParaNutException ("Failed to download the ParaNut bitfile")

    print ("OK\n")


  def done ():
    """Close the board connection."""
    if Board.serialDev:
      Board.serialDev = None


  def recover ():
    """Recover, for example, after a break due to Ctrl-C."""
    #~ print "Recovering..."
    Board.done ()
    Board.init () # Try to recover without writing the Firmware


  def writeLine (line):
    """Write a line to the board (low-level)."""
    Board.assertPresence ()
    Board.serialDev.write ((line + "\n").encode('utf-8'))
    if optDebug: print ("(FLASH) FW <- '%s'" % line)


  def readLine ():
    """Read a single line from the board (low-level)."""
    Board.assertPresence ()
    line = Board.serialDev.readline ()
    try:
      line = line.decode('utf-8')
    except:
      print ("(FLASH) utf-8 decode error: Raw line <- '%s'" % line)
    if optDebug: print ("(FLASH) FW -> '%s'" % line)
    return line



  ### Mid-level (no console output)...


  def writeCommand (cmd):
    """Write a command to the board.

    The argument must be pre-formatted command string as specified by the
    board firmware.
    """
    Board.writeLine (cmd)


  def readAnswer (num_tries = 0):
    """Retrieve and interpret the answer to a previously submitted command.

    The return value is a dictionary 'ret', where:
    - ret["prefix"] is the first character of the response (e.g. "?r" or "?w")
    - ret["args"] is a list of integers containing all arguments in a raw format
    - the remaining fields depend on the response and are pre-intepreted results.

    Comments, empty lines or error answers ("?e...") are never returned.
    In case an error answer is received, an exception with a meaningful
    message is thrown.
    """
    prefix = None
    args = None
    argDict = {}
    argDict["prefix"] = prefix
    argDict["args"] = args
    tries_cnt = 0
    while not prefix:
      # Handle timeout...
      if num_tries > 0:
        if tries_cnt == num_tries:
          # Timeout...
          return argDict
        tries_cnt+=1
      line = Board.readLine ()
      if len(line) == 0:
        continue
        #~ raise ParaNutException ("Firmware did not respond")
      if line[0] != '\x06':
        sys.stdout.write(line[:])
        sys.stdout.flush()
        continue # UART output from ParaNut: ignore
      if line[2] == '?': # Ack for some CMD
          if line[3] == 'e':           # error: bail out
            raise ParaNutException ("Firmware error: " + line.split (maxsplit=2) [2])

          # General output: Generate 'prefix' and 'args'...
          args = line.split ()
          prefix = args[1] # args[0] == '\x06'
          args = args[2:]
          for i, arg in enumerate (args): args[i] = int (arg, 16)

          # Dictionary for "r" and "w" answers...
          if prefix == '?r' or prefix == '?w':
            argDict = { "adr": args[0], "data": args[1] }

          # Dictionary for "b" answers...
          if prefix == '?b':
            argDict = { "adr": args[0], "size": args[1], "chunk_size": args[2], "compressed": args[3] }

          # Dictionary for "a" answers...
          if prefix == '?a':
            argDict = { "state": "init_done" }

          # Dictionary for "!" answers...
          if prefix == '?!':
            argDict = { "tohost": args[0], "fromhost": args[1] }

          # Dictionary for "n" answers...
          if prefix == '?n':
            argDict = { "value": args[0]}

          # Dictionary for "k" answers...
          if prefix == '?k':
            argDict = {}

          # Done...
          argDict["prefix"] = prefix
          argDict["args"] = args
          return argDict
      else:  # TBD: Syscalls, exception for now
        raise ParaNutException ("Unexpected answer" + line)



  def memWrite (adr, val):
    """Write to ParaNut system memory."""
    triesLeft = 3   # try to recover this many times (long uploads may have occasional transfer errors)
    while True:
      try:
        #~ print("SYN ?w {0:08x} {1:08x}".format (adr, val))
        Board.writeCommand ("\x16 ?w {0:08x} {1:08x}".format (adr, val))
        ans = Board.readAnswer (optNumTries)
        if ans["prefix"] != "?w" or ans["adr"] != adr or ans["data"] != val:
          raise ParaNutException ()
        break # Success!
      except:
        triesLeft -= 1
        if triesLeft <= 0: raise ParaNutException ("Memory write command failed")


  def blockWrite (offset, block, compressed):
    """Write to ParaNut system memory."""
    i = 0
    j = 0
    ctrlc = 0
    size = len(block)
    chunk_size = 63
    compressed_num = 1 if compressed else 0
    Board.writeCommand ("\x16 ?b {0:08x} {1:08x} {2:08x} {3:1x}".format (offset, size, chunk_size, compressed_num))
    ans = Board.readAnswer (optNumTries)
    #~ print("Return: {0:08x} {1:08x}, schould be {2:08x} {3:08x}".format (ans["adr"], ans["size"], offset+j, size-j))
    if ans["prefix"] != "?b" or ans["adr"] != offset or ans["size"] != size or ans["chunk_size"] != chunk_size or ans["compressed"] != compressed_num:
      raise ParaNutException ("Did not receive command acknowledge!")

    # Send in chunks so we can give feedback to the user
    for i, j in zip(range(0, size, chunk_size), itertools.chain(range(chunk_size, size, chunk_size), [size])):
      try:
          ret = Board.serialDev.write (block[i:j])
          if ( ret != chunk_size and ret != (j - i) ) :
            raise ParaNutException ("Written bytes != chunk_size!")

          # Major flaw/bug in pyserial? We need to write a \n (0x10) otherwise the last few bytes will never be output to
          # the firmware and everything will hang. Another solution was to write a lot of data till some buffer probably
          # was full and got flushed. NOTHING else would work (like what does flush() even do???) and out_waiting is also 0.
          # Funny enough this problem did not show before because the old linker script put some data with the value 0x10 at the
          # end of every binary.
          Board.serialDev.write ("\n".encode('utf-8'))
          Board.serialDev.flush()

          # Wait for ACK if not at the end
          if (j - i) == chunk_size:
            ans = Board.readAnswer ()
            if ans["prefix"] != "?k":
              raise ParaNutException ("Expected write ack, but received " + ans["prefix"])

          # Output of remaining data
          print("\rSent: {0:d} of {1:d} Bytes... ".format(j, size), end='')
      except KeyboardInterrupt:
          # Received ctrl+c
          if ctrlc == 0:
            ctrlc = 1
            print("\nWARNING: The firmware will not be able to recover from this! If you are sure press CTRL-C again.\n")
          else:
            shutdown()
            raise

    # Read confirmation
    ans = Board.readAnswer (optNumTries)
    if ans["prefix"] != "?b" or ans["adr"] != offset+j or ans["size"] != size or ans["chunk_size"] != chunk_size or ans["compressed"] != compressed_num:
      print("Return: {0:08x} {1:08x}, schould be {2:08x} {3:08x}".format (ans["adr"], ans["size"], offset+j, size,))
      raise ParaNutException ("Did not receive transimission confirmation!")

    print("OK\n")


  def memRead (adr):
    """Read from ParaNut system memory."""
    Board.writeCommand ("\x16 ?r {0:08x}".format (adr))
    ans = Board.readAnswer (optNumTries)
    try:
      val = ans["data"]
      if ans["prefix"] != "?r" or ans["adr"] != adr:
        raise ParaNutException ()
    except:
      raise ParaNutException ("Memory read command failed")
    return val


  def resetParaNut (value):
    """ Set reset of ParaNut (and other HW connected to the reset) to value.
       (1 - reset active, 0 - reset not active) """
    Board.writeCommand("\x16 ?n {0:02x}".format(value));
    ans = Board.readAnswer (optNumTries)
    try:
      if ans["prefix"] != "?n" and ans["value"] != value:
        raise ParaNutException ()
    except:
      raise ParaNutException ("ParaNut reset command failed (No or wrong answer)")




################### (Object) file I/O #####################

def readBinary (binaryFileName):
  """returns memory, the binary data read from binaryFileName"""

  # Read the object file...
  # print ("Read binary file '{0:s}'.".format (binaryFileName))
  f = open (binaryFileName, "rb")
  try: outMemory = f.read()
  except EOFError: pass

  return outMemory

def objcopyElfFile (elfFileName):
  """returns binaryFile, the filename of the created binary"""

  # Check if supplied file is ELF...
  ret = subprocess.run (optElfCheckCmd.format (elfFileName),
              shell=True, stdin=subprocess.DEVNULL, stdout=subprocess.PIPE,
              stderr=subprocess.STDOUT, universal_newlines=True, check=False, timeout=120);
  if ret == "":
    print ("Error: Supplied file is not RISC-V ELF.")
    raise ParaNutException ("Failed to create a binary file from input ELF")

  else:
    # Run objcopy...
    ret = subprocess.run (optObjcopyCmd.format (optObjcopy, elfFileName, optObjcopyTmpFile),
              shell=True, stdin=subprocess.DEVNULL, stdout=subprocess.PIPE,
              stderr=subprocess.STDOUT, universal_newlines=True, check=False, timeout=120);

    if ret.returncode != 0:
      print ("FAILED!", flush=True)
      print ("\n-------------------- DETAILED ERROR LOG FOLLOWS --------------------\n")
      print (ret.stdout)
      print ("\n-------------------- END OF DETAILED ERROR LOG ---------------------\n")
      raise ParaNutException ("Failed to create a binary file from input ELF")

  return optObjcopyTmpFile


############################## Main ############################################


def usage ():
  print ("Usage: pn-flash [options] \n"
         "   or: pn-flash [options] Hardware-Definition.hdf ARM-Firmware.elf\n\n"
         "Options:\n"
         "  -h              : this help\n"
         "  -d <device>     : set serial device [default: auto detect]\n"
         "  -b <bitfile>    : program Hardware bitfile to FPGA\n"
         "  -p <elf/binary> : flash RISC-V elf or binary program\n"
         "  -o <adr1:adr2>  : set fromhost and tohost address; Addresses need to hexadecimal\n"
         "  -i              : run initialization routine for external peripheral hardware\n"
         "  -c              : keep running and show stdout/stderr of the ParaNut\n"
         "  -v              : verbose output\n")
  exit ()

def shutdown ():
  # Shutdown...
  Board.done ()
  try: # Silently delete temp objcopy file
    os.remove(optObjcopyTmpFile)
  except OSError:
      pass
  exit ()


# Banner...
print ("ParaNut flash software %i.%i.%i   (C) 2019-2022 Alexander Bahle et al., University of Applied Sciences Augsburg\n"
       % (versionMajor, versionMinor, versionRevision))

# Read options...
try:
  opts, optArgs = getopt.getopt (sys.argv[1:], "hcivd:b:p:o:")
  for opt, value in opts:
    if opt == "-d":
      optSerialDevices = [ value ];
    elif opt == "-v":
      optDebug = True
    elif opt == "-c":
      optConsole = True
    elif opt == "-i":
      optInitPeripherals = True
    elif opt == "-b":
      optBitfile = value
      optResetNeeded = 1
    elif opt == "-p":
      optBinary = value
      optResetNeeded = 1
    elif opt == "-o":
      optAddress = value.split(':')
      optResetNeeded = 1 # Really needed?
    else: usage ()
except getopt.GetoptError:
  usage ()

# Check arguments
if len(optArgs) != 2 and (len(optArgs) == 0 and optBinary == "" and optConsole == False and optBitfile == "" and len(optAddress) != 2) :
  print("Not enough Arguments!")
  usage ()

# Try to init board...
try:
  Board.init (len(optArgs) == 2)
except Exception as e:
  print ("ERROR during Board.init(): " + str(e))
  exit (3)

print ()

# Do the options require a reset?
if optResetNeeded == 1:
  Board.resetParaNut (1)
  time.sleep(1.0)

if len(optAddress) == 2:
    Board.writeCommand("\x16 ?! {0:08x} {1:08x}".format(int(optAddress[0], 16), int(optAddress[1], 16)))
    ans = Board.readAnswer (optNumTries)
    if ans["prefix"] != "?!" or ans["tohost"] != int(optAddress[0], 16) or ans["fromhost"] != int(optAddress[1], 16):
        print ("ERROR: Could not set the tohost/fromhost address to {0:08x}/{1:08x}: {2:08x}/{3:08x}".format(int(optAddress[0], 16), int(optAddress[1], 16), ans["tohost"], ans["fromhost"]))
        exit(5)
    print ("Set fromhost and tohost address to {0:08x} and {1:08x}... OK".format(int(optAddress[0], 16), int(optAddress[1], 16)))

if optBinary != "":
  print ("Transfer ParaNut software '{0:s}'.".format(optBinary))
  filename, file_ext = os.path.splitext(optBinary)
  compressed = False
  if file_ext == ".elf" or file_ext == "":
    # If elf file is supplied try to create binary by calling objcopy
    print ("Generating stripped binary from elf file ... ", end="", flush=True)
    optBinary = objcopyElfFile(optBinary)
    print ("done.")
  elif file_ext == ".gz" or file_ext == ".gzip":
    # If gzip compressed file is provided, set flag to unpack it on the board
    compressed = True
  memory = readBinary (optBinary)
  Board.blockWrite(0x10000000, memory, compressed)
  if not compressed:
    # Check for transmission errors (first 10 words):
    for i in range (0, 10):
      data = Board.memRead (0x10000000 + (i*4))
      memw = (memory[(i*4)+3] << 24) + (memory[(i*4)+2] << 16) + (memory[(i*4)+1] << 8) + memory[i*4]
      #print ("0x{0:08x}: 0x{1:08x}".format (memw, data))
      if data != memw:
        print ("Binary 0x{0:08x} != Memory 0x{1:08x}".format (memw, data))
        print("ERROR during transmission, try again or reset the hardware")
        exit (4)
    # Check for transmission errors (last 10 words):
    words = int(len(memory) / 4)
    for i in range (words-10, words):
      data = Board.memRead (0x10000000 + (i*4))
      memw = (memory[(i*4)+3] << 24) + (memory[(i*4)+2] << 16) + (memory[(i*4)+1] << 8) + memory[i*4]
      #print ("0x{0:08x}: 0x{1:08x}".format (memw, data))
      if data != memw:
        print ("Binary 0x{0:08x} != Memory 0x{1:08x}".format (memw, data))
        print("ERROR during transmission, try again or reset the hardware")
        exit (4)

if optBitfile != "":
  Board.programBitfile(optBitfile)

if optInitPeripherals == True:
  # Initialize peripheral hardware after bitfile upload:
  print ("Initialize peripheral hardware... ", end="", flush=True)
  Board.writeCommand ("\x16 ?a")
  ans = Board.readAnswer (optNumTries)
  if ans["prefix"] != "?a" or ans["state"] != "init_done":
    raise ParaNutException ("Did not receive peripheral initialization confirmation!")
  print ("OK")

# Did the options require a reset?
# If yes deactivate the reset here
if optResetNeeded == 1:
  Board.resetParaNut (0)

if optConsole == True:
  print("Starting console:\n")
  while True:
    time.sleep(0.3)
    try:
       if Board.serialDev.inWaiting() > 0:
        ans = Board.readAnswer()
    except KeyboardInterrupt:
        # Received ctrl+c
        break
    except IOError as e:
        print ("ERROR: Connection lost: " +  e.__str__())
        break
    except Exception as e:
        print ("ERROR: " +  e.__str__())
        pass

# Shutdown...
shutdown()
