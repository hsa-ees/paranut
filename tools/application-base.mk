#  -----------------------------------------------------------------------------
#
#  This file is part of the ParaNut project.
#
#  Copyright (C) 2023 Felix Wagner <felix.wagner1@hs-augsburg.de>
#      Hochschule Augsburg, University of Applied Sciences
#
#  Description:
#    Generate hal libraries for the ParaNut
#
#  --------------------- LICENSE -----------------------------------------------
#  Redistribution and use in source and binary forms, with or without modification,
#  are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice, this
#     list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation and/or
#     other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#  -----------------------------------------------------------------------------

#################  Define important Directories ################################ 
# Root of ParaNut repository or local project
APPLICATION_DIR ?= .

################# Software Configuration #######################################

# SOFTWARE_SRC:               Sources that are used for Simulation as well as 
#                            synthesis. (including the testbench/sc_main file)
SOFTWARE_SRC ?= 

# SOFTWARE_HEADERS:           Headers provided by the library that shall be copied 
#                            to include
SOFTWARE_HEADERS ?=  

# LIBRARY_DEPENDENCIES:      Paranut specific libraries, this software 
#                            depends on. Mainly used to make shure the respective 
#                            files are built
LIBRARY_DEPENDENCIES ?= 

# SOFTWARE_CFLAGS:            Additional compiler flags this software needs
SOFTWARE_CFLAGS ?= 

# SOFTWARE_LDFLAGS:           Additional linker flags this software needs
SOFTWARE_LDFLAGS ?=  

# CFG_MARCH:                 Configure the ISA
CFG_MARCH ?= rv32ima

# ADDITIONAL_TARGETS:        List targets that must be fullfilled before building
#                            any of the standard targets
ADDITIONAL_TARGETS ?= 

# SOFTWARE_NAME:              Must be provided by including makefile. Should be 
#                            generated by parsing the folder name
SOFTWARE_NAME ?=

################# Runtime Options    ###########################################
TRACE_LVL ?= 2
LOG_LVL ?= 2
################# Target definitions ###########################################
SOFTWARE_TARGET = $(APPLICATION_DIR)/$(SOFTWARE_NAME).a
LIBRARY_DEPENDENCY_FILES := $(addprefix $(PNS_HAL_LIB_DIR)/,$(addsuffix .a,$(LIBRARY_DEPENDENCIES)))
LIBRARY_DEPENDENCY_CFLAGS := $(addprefix -l,$(LIBRARY_DEPENDENCIES:lib%=%))

################# Compile Source Setup  ########################################
SOFTWARE_OBJ := $(SOFTWARE_SRC:.c=.o)
SOFTWARE_OBJ := $(SOFTWARE_OBJ:.S=.o)

################# Compiler Configuration #######################################
# Configuration options
CROSS_COMPILE ?= riscv64-unknown-elf

CC      := $(CROSS_COMPILE)-gcc
GXX     := $(CROSS_COMPILE)-g++
OBJDUMP := $(CROSS_COMPILE)-objdump
OBJCOPY := $(CROSS_COMPILE)-objcopy
GDB     := $(CROSS_COMPILE)-gdb
AR      := $(CROSS_COMPILE)-ar
SIZE    := $(CROSS_COMPILE)-size

ELF = $(SOFTWARE_NAME)
HEADERS = $(wildcard *.h)


CFLAGS ?= -g -O2 -march=$(CFG_MARCH) -mabi=ilp32 -I$(RISCV_COMMON_DIR) -I$(PNS_HAL_INC_DIR) $(SOFTWARE_CFLAGS)
LDFLAGS ?= $(CFLAGS) -static -nostartfiles -lc $(RISCV_COMMON_DIR)/startup.S $(RISCV_COMMON_DIR)/syscalls.c -T $(RISCV_COMMON_DIR)/paranut.ld $(SOFTWARE_LDFLAGS) -L$(PNS_HAL_LIB_DIR) $(LIBRARY_DEPENDENCY_CFLAGS)
SCFLAGS ?= $(CFLAGS)
################# Compilation Targets ##########################################
# Software Targets
all: $(ELF) dump

.PHONY: build
build: | $(ADDITIONAL_TARGETS) $(ELF)

$(ELF): $(SOFTWARE_OBJ) $(LIBRARY_DEPENDENCY_FILES)
	$(CC) -o $@ $(SOFTWARE_OBJ) $(LDFLAGS)

%.o: %.c $(CONFIG_MK) $(PNS_CONFIG_MK) $(HEADERS) $(LIBRARY_DEPENDENCY_FILES) $(ADDITIONAL_TARGETS)
	$(CC) -c $(CFLAGS) -o $@ $<

# Builds objects from assembler source code
%.o: %.S $(CONFIG_MK) $(PNS_CONFIG_MK) $(HEADERS) $(LIBRARY_DEPENDENCY_FILES) $(ADDITIONAL_TARGETS)
	$(CC) -c $(SCFLAGS) -o $@ $<

################# Simulation Targets ##########################################
.PHONY: sim 
sim: $(ELF) $(PN_SIM_BIN)
	$(PN_SIM_BIN) -t0 $<

.PHONY: sim-log
sim-log: $(ELF) $(PN_SIM_BIN)
	$(PN_SIM_BIN) -i$(LOG_LVL) $< 2> instruction.log

.PHONY: sim-trace 
sim-trace: $(ELF) $(PN_SIM_BIN)
	$(PN_SIM_BIN) -t$(TRACE_LVL) $<

.PHONY: sim-debug 
sim-debug: $(ELF) $(PN_SIM_BIN)
	$(PN_SIM_BIN) -d $<

# Misc Targets
.PHONY: dump
dump: $(ELF).dump
$(ELF).dump: $(ELF)
	$(OBJDUMP) -S -D $< > $@

.PHONY: bin
bin: $(ELF).bin
$(ELF).bin: $(ELF)
	$(OBJCOPY) -S -O binary $< $@

################### PN-SIM Dependency ##########################################
$(PN_SIM_BIN): $(CONFIG_MK) $(PNS_CONFIG_MK)
	+$(MAKE) -C $(PNS_SYSC_DIR) build-sim

################### library Dependency ##########################################
# .SECONDEXPANSION is needed to enable shell execution in target dependency
.SECONDEXPANSION:
$(PNS_HAL_LIB_DIR)/%.a: $$(shell cat $(HAL_DIR)/$$*/Makefile.deps)
	+$(MAKE) -C $(HAL_DIR)/$* build-lib


software-clean:

.PHONY: clean
clean:: software-clean
	rm -f *.o *.d *.o.s *.c.s $(ELF) $(ELF).bin $(ELF).dump instruction.log Makefile.deps 2> /dev/null

################### HEEELP #####################################################
.PHONY: help
help:
	@echo
	@echo "Makefile for building and running software"
	@echo
	@echo "Usage: make [<target>] [<parameter>=<value> ...]"
	@echo
	@echo "Targets:"
	@echo
	@echo "  build       : Create riscv binary from sources"
	@echo "  clean       : Delete files created during the build process"
	@echo
	@echo "  sim         : Run binary in ParaNut simulator (using $(PN_SYSTEM))"
	@echo "  sim-log     : simulate, creating instruction trace (set level with LOG_LVL, default 2)"
	@echo "  sim-trace   : simulate, creating signal trace (set level with TRACE_LVL, default 2)"
	@echo "  sim-debug   : simulate with debugging enabled"