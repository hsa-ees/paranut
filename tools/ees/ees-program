#!/bin/bash

#  (C) 2017-2019 Gundolf Kiefer, University of Applied Sciences Augsburg
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.


VERSION=0.9

TMP=/tmp
TOOL="${0##*/}"
CMDLINE="${0##*/} $@"

if [[ "$EES_VIVADO_SETTINGS" != "" ]]; then
  test -f $EES_VIVADO_SETTINGS && . $EES_VIVADO_SETTINGS
fi





############################## Options #########################################

OPT_HW_DEV="xc7*"          # FPGA target (default = any Xilinx 7-series device)
OPT_CPU_DEV="ARM* #0"      # CPU target (default = first ARM core)
OPT_BITFILE=""





############################## Helpers #########################################


print_tcl_head () {
  echo
  echo
  echo
  echo "puts \"\n\n\""
  echo "puts \"###########################################################################\""
  echo "puts \"#\""
  echo "puts \"#          $1\""
  echo "puts \"#\""
  echo "puts \"###########################################################################\""
  echo "puts \"\""
  echo
}






############################## Programming #####################################


do_program () {
    # $1 = Name of the bitfile

    # Setup variables...
    BITFILE="$1"
    SCRIPT="ees-program.tcl"
    JTAGINFO=jtaginfo.tmp
    CMD="xsdb -quiet $SCRIPT"

    # Create temporary XSDB script to fetch board JTAG information...
    echo "# Temporary script to get FPGA JTAG information." > $SCRIPT
    echo "#" >> $SCRIPT
    echo "# '$TOOL' is written by Gundolf Kiefer <gundolf.kiefer@hs-augsburg.de>, UaS Augsburg." >> $SCRIPT
    echo "#" >> $SCRIPT
    echo >> $SCRIPT

    # Get the boards JTAG information (devices)
    echo "set logfile [open \"$JTAGINFO\" \"w\"]" >> $SCRIPT
    echo "connect" >> $SCRIPT
    echo "puts \$logfile [targets]" >> $SCRIPT
    echo "close \$logfile" >> $SCRIPT
    $CMD
    ARM_INFO=$(cat $JTAGINFO | grep ARM)

    # Create XSDB script...
    echo "# Program script created by: $CMDLINE." > $SCRIPT
    echo "# To be run as: $CMD" >> $SCRIPT
    echo "#" >> $SCRIPT
    echo "# '$TOOL' is written by Gundolf Kiefer <gundolf.kiefer@hs-augsburg.de>, UaS Augsburg." >> $SCRIPT
    echo "#" >> $SCRIPT
    echo >> $SCRIPT

    # Write programming commands ...
    echo "connect" >> $SCRIPT
    if [[ "$arm_info" != "" ]]; then
        echo "targets -set -filter { name =~ \"$OPT_CPU_DEV*\" }" >> $SCRIPT
        echo "rst" >> $SCRIPT
    else
        echo "targets -set -filter { name =~ \"$OPT_HW_DEV*\" }" >> $SCRIPT
    fi
    echo "fpga $BITFILE" >> $SCRIPT

    # Run XSDB...
    $CMD
    rm -fr $SCRIPT $JTAGINFO .Xil
}





############################## Software Debugging ##############################


do_debug () {
    # $1 = operation: '-r' = run, '-d' = debug
    # $1 = HW definition file
    # $2 = ELF file

    # Setup variables...
    OP="$1"
    HDF_FILE="$2"
    ELF_FILE="$3"
    SCRIPT="ees-program.tcl"
    if [[ "$OP" == "-r" ]]; then
      CMD="xsdb -quiet $SCRIPT"
    else
      CMD="xsdb -interactive -quiet $SCRIPT"
    fi
    WORK="ees-program.tmp"

    # Create temporary link of the HDF file...
    # WORKAROUND [2018-02-26]: When opening an HDF file, 'xsdb' presently creates a
    #     couple of 'ps7_init*' files in the directory where the HDF is located.
    #     Since that is not owned by Xilinx and may be write-protected, we have to create
    #     a local working directory and symlink the HDF file there.
    rm -fr $WORK
    mkdir -p $WORK

    # WORKAROUND [2018-08-02]: xsdb seems to need a hardware description file with '.hdf'
    #     extension. As the hardware description file within the Vivado implementation
    #     directory extends with '.sysdef', we just replace the ending of the local work
    #     symlink.
    HDF_NAME="${HDF_FILE##*/}"
    HDF_FILE_WORK="$WORK/${HDF_NAME%.*}.hdf"
    ln -s `realpath $HDF_FILE` "$HDF_FILE_WORK"

    # Create XSDB script ...
    echo "# Program script created by: $TOOL, written by Gundolf Kiefer <gundolf.kiefer@hs-augsburg.de>." > $SCRIPT
    echo "#" >> $SCRIPT
    echo "# Command line:         $CMDLINE" >> $SCRIPT
    echo "# Running this script:  $CMD" >> $SCRIPT
    echo >> $SCRIPT

    # Write programming commands ...
    echo "connect" >> $SCRIPT
    echo "target -set -filter { name =~ \"$OPT_CPU_DEV\" }" >> $SCRIPT
    if [[ "$OPT_BITFILE" != "" ]]; then
        echo "rst" >> $SCRIPT
        #~ echo "target -set -filter { name =~ \"$OPT_HW_DEV*\" }" >> $SCRIPT
        echo "fpga $OPT_BITFILE" >> $SCRIPT
    else
        # Workaround for VEARS:
        #  Problem: if VEARS is running (fetching data) while the system gets initialized through ps7_init, it will hang from there on.
        #  Solution: soft-reset the VEARS core (so that it won't fetch any data), then proceed to initilize the system.
        #  Caution: a VEARS-enabled (with VEARS at adress 0x43c00000) bitfile must be programmed so that the register access can be performed!
        #echo "mwr -force 0x43c00014 0x2" >> $SCRIPT

        # reset the system:
        echo "rst -cores" >> $SCRIPT
    fi
    echo "loadhw $HDF_FILE_WORK" >> $SCRIPT
    #~ echo "loadhw -mem-ranges [list {0x40000000 0xbfffffff}] $HDF_FILE" >> $SCRIPT
    echo "source $WORK/ps7_init.tcl" >> $SCRIPT
    echo "ps7_init" >> $SCRIPT
    echo "ps7_post_config" >> $SCRIPT
    echo "dow $ELF_FILE" >> $SCRIPT
    if [[ "$OP" == "-d" ]]; then
      echo "bpadd main" >> $SCRIPT  # Add breakpoint at the beginning of main ()
    fi
    echo "con" >> $SCRIPT

    # Give some hints on debugging ...
    if [[ "$OP" == "-d" ]]; then
        echo
        echo "Some Hints on Interactive Debugging"
        echo "==================================="
        echo
        echo "1. To view source line information, pass the option '-g' to the compiler."
        echo "   (In auto-generated makefiles: Add this option to CC_FLAGS.)"
        echo
        echo "2. Useful interactive commands:"
        echo "     > help               # print help"
        echo "     > mrd <adr> [<num>]  # read memory"
        echo "     > mwr <adr> <val>    # write to memory"
        echo "     > bpadd              # add breakpoint"
        echo "     > bplist             # list breakpoints"
        echo "     > bt                 # show call stack (equivalent to 'backtrace')"
        echo "     > con                # continue (until next breakpoint or exit)"
        echo "     > nxt; bt            # next line + view call stack"
        echo "     > stp; bt            # step line + view call stack"
        echo
        # TBD: How to restart safely? ->  rst  # reset?
    fi

    # Run XSDB...
    $CMD || exit 3

    # Cleanup...
    rm -fr $SCRIPT $WORK .Xil
}





############################## Main ############################################


# Usage and error helpers...
usage () {
  echo "Usage: $TOOL [-p <hw_dev>] <bitfile>"
  echo "       $TOOL [-p <hw_dev>] -r <HDF file> <ELF file>"
  echo "       $TOOL [-p <hw_dev>] -d <HDF file> <ELF file>"
  echo
  echo "Program a Xilinx FPGA in the EES lab at the University of Applied Sciences Augsburg."
  echo "Run or debug software on a Xilinx Zynq7 FPGA."
  echo
  echo "  -p <hw_dev>"
  echo "      Select the hardware device by filter expression [default = '$OPT_HW_DEV']."
  echo "      Run 'get_hw_devices' in Vivado/Tcl to get a list of devices."
  echo
  echo "  -c <CPU filter>"
  echo "      Select the CPU for running/debugging by filter expression [default = '$OPT_CPU_DEV']."
  echo
  echo "  -b <bitfile>"
  echo "      Select a bitfile to program the FPGA with."
  echo
  echo "  -r <HDF file> <ELF file>"
  echo "      Run the ELF file on the FPGA."
  echo
  echo "  -d <HDF file> <ELF file>"
  echo "      Load the ELF file on the FPGA and start an interactive debug session in XSDB."
  echo
  echo "NOTE: Due to a bug in XSCT (Vivado 2017.2), the HDF file must have the"
  echo "      exact extension '.hdf'."
}


error () {
  echo "ERROR: $1"
  echo
  usage
  exit
}


# Sanity / print usage on empty call...
if [[ "$1" == "" ]]; then
  usage
  exit
fi


# Parse known options...
PARSE_OPTS="1"
while [[ $PARSE_OPTS == "1" ]]; do
  case "$1" in
    -p)           # Set OPT_HW_DEV filter
      OPT_HW_DEV="$2"
      shift 2
      ;;
    -c)           # Set OPT_CPU_DEV filter
      OPT_CPU_DEV="$2"
      shift 2
      ;;

    -b)           # Set OPT_BITFILE
      OPT_BITFILE="$2"
      shift 2
      ;;

    -r|-d)
      if [[ "$3" == "" ]]; then
        error "Too few arguments"
      fi
      do_debug $1 $2 $3
      exit
      ;;

    -h)           # Help
      usage
      exit
      ;;

    -*)
      error "Unknown option '$1'"
      ;;
    *)
      PARSE_OPTS="0"
      ;;
  esac
done


# Program bitfile if nothing else has been done yet...
if [[ "$1" != "" ]]; then
  OPT_BITFILE="$1"
fi


# Program bitfile...
do_program "$OPT_BITFILE"
