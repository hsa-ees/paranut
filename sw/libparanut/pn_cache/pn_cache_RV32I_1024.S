/* 
 * I was automatically generated by pn_cache_RV32I_buildscript.py,
 * invoked by libparanut Makefile -> No edits!
 */

/** @file */

/**
 * \internal
 * \file
 * \brief        Contains RV32I assembly implementations of assembly
 *               functions called in \ref pn_cache.c for cache line
 *               size 1024.
 *
 * This file (for this specific architecture, others may do it
 * differently) was created by \ref pn_cache_RV32I_buildscript.py
 * while compiling (automatically called by \ref Makefile), as
 * are the other files with the pattern pn_cache_RV32I_*.S for name.
 * The reasons for this are described in the \ref
 * pn_cache_RV32I_buildscript.py documentation itself.
 *
 * The code shown below was created with a cache line size of 1024 Bit.
 *
 * So far, the following cache line sizes are available (in bits):
 * 32 64 128 256 512 1024 2048
 *
 * Contains implementations of:
 *    - \ref enable_cache_as()
 *    - \ref disable_cache_as()
 *    - \ref cache_banks_as()
 *    - \ref cache_sets_as()
 *    - \ref mem_size_as()
 *    - \ref invalidate_1024_as()
 *    - \ref invalidate_bulk_1024_as()
 *    - \ref writeback_1024_as()
 *    - \ref writeback_bulk_1024_as()
 *    - \ref flush_1024_as()
 *    - \ref flush_bulk_1024_as()
 *
 * \includelineno pn_cache/pn_cache_RV32I_1024.S
 */

/*
 * Put in here so Doxygen will know that it is implemented in this
 * file. Sadly, Doxygen has no built in assembly interpreter, so we
 * are stuck with this.
 */

#ifdef DOXYGEN

  /**
    * \addtogroup as
    * @{
    */

  /**
    * @{
    */

  /**
   * \internal
   * \fn         void enable_cache_as(void)
   * \brief      Enables cache.
   */
   void enable_cache_as(void) {}

  /**
   * \internal
   * \fn         void disable_cache_as(void)
   * \brief      Disables cache.
   */
   void disable_cache_as(void) {}

  /**
   * \internal
   * \fn         unsigned int cache_banks_as(void)
   * \brief      Returns number of cache banks.
   *
   * \return     Number of cache banks.
   */
   unsigned int cache_banks_as(void) {}

  /**
   * \internal
   * \fn         unsigned int cache_sets_as(void)
   * \brief      Returns number of cache sets.
   *
   * \return     Number of cache sets.
   */
   unsigned int cache_sets_as(void) {}

  /**
   * \internal
   * \fn         unsigned int mem_size_as(void)
   * \brief      Reads memory size.
   *
   * \return     Content of pnmemsize register.
   */
   unsigned int mem_size_as(void) {}

  /**
   * \internal
   * \fn         void invalidate_1024_as(unsigned int addr, unsigned int endaddr)
   * \brief      Invalidates single cache lines until end address
   *             is reached.
   *
   * Will at least invalidate one line.
   */
   void invalidate_1024_as(unsigned int addr, unsigned int endaddr) {}

  /**
   * \internal
   * \fn         void invalidate_bulk_1024_as(unsigned int addr, unsigned int endaddr)
   * \brief      Invalidates 32 cache lines at once until end 
   *             address is reached.
   *
   * Will at least invalidate 32 lines.
   */
   void invalidate_bulk_1024_as(unsigned int addr, unsigned int endaddr) {}

  /**
   * \internal
   * \fn         void writeback_1024_as(unsigned int addr, unsigned int endaddr)
   * \brief      Writes back single cache lines until end address
   *             is reached.
   *
   * Will at least writeback one line.
   */
   void writeback_1024_as(unsigned int addr, unsigned int endaddr) {}

  /**
   * \internal
   * \fn         void writeback_bulk_1024_as(unsigned int addr, unsigned int endaddr)
   * \brief      Writes back 32 cache lines at once until end 
   *             address is reached.
   *
   * Will at least writeback 32 lines.
   */
   void writeback_bulk_1024_as(unsigned int addr, unsigned int endaddr) {}

  /**
   * \internal
   * \fn         void flush_1024_as(unsigned int addr, unsigned int endaddr)
   * \brief      Flushes single cache lines until end address
   *             is reached.
   *
   * Will at least flush one line.
   */
   void flush_1024_as(unsigned int addr, unsigned int endaddr) {}

  /**
   * \internal
   * \fn         void flush_bulk_1024_as(unsigned int addr, unsigned int endaddr)
   * \brief      Flushes 32 cache lines at once until end 
   *             address is reached.
   *
   * Will at least flush 32 lines.
   */
   void flush_bulk_1024_as(unsigned int addr, unsigned int endaddr) {}

  /**
    * @}
    */

  /**
    * @}
    */

#endif /* DOXYGEN */

/*Header***********************************************************************/

#ifndef DOXYGEN

.text                                  /* enter text section                  */
.align 2                               /* align Code to 2^2 Bytes             */

/* declare labels in here to be global */
.globl enable_cache_as
.globl disable_cache_as
.globl cache_banks_as
.globl cache_sets_as
.globl mem_size_as
.globl invalidate_1024_as
.globl invalidate_bulk_1024_as
.globl writeback_1024_as
.globl writeback_bulk_1024_as
.globl flush_1024_as
.globl flush_bulk_1024_as

/* ParaNut Custom Registers and Instructions */
#include "custom_RV32I.S"

/*Functions********************************************************************/

enable_cache_as:
   fence
   li   t0,      3
   csrs pncache, t0
   ret

/*----------------------------------------------------------------------------*/

disable_cache_as:
   fence
   li   t0,      0
   csrw pncache, t0
   ret

/*----------------------------------------------------------------------------*/

cache_banks_as:
   csrr a0,      pncacheinfo
   srli a0,      a0,      8
   ret

/*----------------------------------------------------------------------------*/

cache_sets_as:
  csrr a0,       pncachesets
  ret

/*----------------------------------------------------------------------------*/

mem_size_as:
  csrr a0,       pnmemsize
  ret

/*----------------------------------------------------------------------------*/

invalidate_1024_as:
   fence
invalidate_1024_as_loop:
   CINV(10, 0x000)
   addi a0, a0, 128
   blt a0, a1, invalidate_1024_as_loop
   ret

/*----------------------------------------------------------------------------*/

invalidate_bulk_1024_as:
   fence
li t0, 2048
invalidate_bulk_1024_as_loop:
   CINV(10, 0)
   CINV(10, 128)
   CINV(10, 256)
   CINV(10, 384)
   CINV(10, 512)
   CINV(10, 640)
   CINV(10, 768)
   CINV(10, 896)
   CINV(10, 1024)
   CINV(10, 1152)
   CINV(10, 1280)
   CINV(10, 1408)
   CINV(10, 1536)
   CINV(10, 1664)
   CINV(10, 1792)
   CINV(10, 1920)
   add a0, a0, t0
   CINV(10, 0)
   CINV(10, 128)
   CINV(10, 256)
   CINV(10, 384)
   CINV(10, 512)
   CINV(10, 640)
   CINV(10, 768)
   CINV(10, 896)
   CINV(10, 1024)
   CINV(10, 1152)
   CINV(10, 1280)
   CINV(10, 1408)
   CINV(10, 1536)
   CINV(10, 1664)
   CINV(10, 1792)
   CINV(10, 1920)
   add a0, a0, t0
   blt  a0, a1, invalidate_bulk_1024_as_loop 
   ret

/*----------------------------------------------------------------------------*/

writeback_1024_as:
   fence
writeback_1024_as_loop:
   CWB(10, 0x000)
   addi a0, a0, 128
   blt a0, a1, writeback_1024_as_loop
   ret

/*----------------------------------------------------------------------------*/

writeback_bulk_1024_as:
   fence
li t0, 2048
writeback_bulk_1024_as_loop:
   CWB(10, 0)
   CWB(10, 128)
   CWB(10, 256)
   CWB(10, 384)
   CWB(10, 512)
   CWB(10, 640)
   CWB(10, 768)
   CWB(10, 896)
   CWB(10, 1024)
   CWB(10, 1152)
   CWB(10, 1280)
   CWB(10, 1408)
   CWB(10, 1536)
   CWB(10, 1664)
   CWB(10, 1792)
   CWB(10, 1920)
   add a0, a0, t0
   CWB(10, 0)
   CWB(10, 128)
   CWB(10, 256)
   CWB(10, 384)
   CWB(10, 512)
   CWB(10, 640)
   CWB(10, 768)
   CWB(10, 896)
   CWB(10, 1024)
   CWB(10, 1152)
   CWB(10, 1280)
   CWB(10, 1408)
   CWB(10, 1536)
   CWB(10, 1664)
   CWB(10, 1792)
   CWB(10, 1920)
   add a0, a0, t0
   blt  a0, a1, writeback_bulk_1024_as_loop 
   ret

/*----------------------------------------------------------------------------*/

flush_1024_as:
   fence
flush_1024_as_loop:
   CFLUSH(10, 0x000)
   addi a0, a0, 128
   blt a0, a1, flush_1024_as_loop
   ret

/*----------------------------------------------------------------------------*/

flush_bulk_1024_as:
   fence
li t0, 2048
flush_bulk_1024_as_loop:
   CFLUSH(10, 0)
   CFLUSH(10, 128)
   CFLUSH(10, 256)
   CFLUSH(10, 384)
   CFLUSH(10, 512)
   CFLUSH(10, 640)
   CFLUSH(10, 768)
   CFLUSH(10, 896)
   CFLUSH(10, 1024)
   CFLUSH(10, 1152)
   CFLUSH(10, 1280)
   CFLUSH(10, 1408)
   CFLUSH(10, 1536)
   CFLUSH(10, 1664)
   CFLUSH(10, 1792)
   CFLUSH(10, 1920)
   add a0, a0, t0
   CFLUSH(10, 0)
   CFLUSH(10, 128)
   CFLUSH(10, 256)
   CFLUSH(10, 384)
   CFLUSH(10, 512)
   CFLUSH(10, 640)
   CFLUSH(10, 768)
   CFLUSH(10, 896)
   CFLUSH(10, 1024)
   CFLUSH(10, 1152)
   CFLUSH(10, 1280)
   CFLUSH(10, 1408)
   CFLUSH(10, 1536)
   CFLUSH(10, 1664)
   CFLUSH(10, 1792)
   CFLUSH(10, 1920)
   add a0, a0, t0
   blt  a0, a1, flush_bulk_1024_as_loop 
   ret

#endif /* !DOXYGEN */

/*EOF**************************************************************************/
