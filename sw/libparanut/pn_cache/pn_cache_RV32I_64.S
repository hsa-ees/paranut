/* 
 * I was automatically generated by pn_cache_RV32I_buildscript.py,
 * invoked by libparanut Makefile -> No edits!
 */

/** @file */

/**
 * \internal
 * \file
 * \brief        Contains RV32I assembly implementations of assembly
 *               functions called in \ref pn_cache.c for cache line
 *               size 64.
 *
 * This file (for this specific architecture, others may do it
 * differently) was created by \ref pn_cache_RV32I_buildscript.py
 * while compiling (automatically called by \ref Makefile), as
 * are the other files with the pattern pn_cache_RV32I_*.S for name.
 * The reasons for this are described in the \ref
 * pn_cache_RV32I_buildscript.py documentation itself.
 *
 * The code shown below was created with a cache line size of 64 Bit.
 *
 * So far, the following cache line sizes are available (in bits):
 * 32 64 128 256 512 1024 2048
 *
 * Contains implementations of:
 *    - \ref enable_cache_as()
 *    - \ref disable_cache_as()
 *    - \ref cache_banks_as()
 *    - \ref cache_sets_as()
 *    - \ref mem_size_as()
 *    - \ref invalidate_64_as()
 *    - \ref invalidate_bulk_64_as()
 *    - \ref writeback_64_as()
 *    - \ref writeback_bulk_64_as()
 *    - \ref flush_64_as()
 *    - \ref flush_bulk_64_as()
 *
 * \includelineno pn_cache/pn_cache_RV32I_64.S
 */

/*
 * Put in here so Doxygen will know that it is implemented in this
 * file. Sadly, Doxygen has no built in assembly interpreter, so we
 * are stuck with this.
 */

#ifdef DOXYGEN

  /**
    * \addtogroup as
    * @{
    */

  /**
    * @{
    */

  /**
   * \internal
   * \fn         void enable_cache_as(void)
   * \brief      Enables cache.
   */
   void enable_cache_as(void) {}

  /**
   * \internal
   * \fn         void disable_cache_as(void)
   * \brief      Disables cache.
   */
   void disable_cache_as(void) {}

  /**
   * \internal
   * \fn         unsigned int cache_banks_as(void)
   * \brief      Returns number of cache banks.
   *
   * \return     Number of cache banks.
   */
   unsigned int cache_banks_as(void) {}

  /**
   * \internal
   * \fn         unsigned int cache_sets_as(void)
   * \brief      Returns number of cache sets.
   *
   * \return     Number of cache sets.
   */
   unsigned int cache_sets_as(void) {}

  /**
   * \internal
   * \fn         unsigned int mem_size_as(void)
   * \brief      Reads memory size.
   *
   * \return     Content of pnmemsize register.
   */
   unsigned int mem_size_as(void) {}

  /**
   * \internal
   * \fn         void invalidate_64_as(unsigned int addr, unsigned int endaddr)
   * \brief      Invalidates single cache lines until end address
   *             is reached.
   *
   * Will at least invalidate one line.
   */
   void invalidate_64_as(unsigned int addr, unsigned int endaddr) {}

  /**
   * \internal
   * \fn         void invalidate_bulk_64_as(unsigned int addr, unsigned int endaddr)
   * \brief      Invalidates 32 cache lines at once until end 
   *             address is reached.
   *
   * Will at least invalidate 32 lines.
   */
   void invalidate_bulk_64_as(unsigned int addr, unsigned int endaddr) {}

  /**
   * \internal
   * \fn         void writeback_64_as(unsigned int addr, unsigned int endaddr)
   * \brief      Writes back single cache lines until end address
   *             is reached.
   *
   * Will at least writeback one line.
   */
   void writeback_64_as(unsigned int addr, unsigned int endaddr) {}

  /**
   * \internal
   * \fn         void writeback_bulk_64_as(unsigned int addr, unsigned int endaddr)
   * \brief      Writes back 32 cache lines at once until end 
   *             address is reached.
   *
   * Will at least writeback 32 lines.
   */
   void writeback_bulk_64_as(unsigned int addr, unsigned int endaddr) {}

  /**
   * \internal
   * \fn         void flush_64_as(unsigned int addr, unsigned int endaddr)
   * \brief      Flushes single cache lines until end address
   *             is reached.
   *
   * Will at least flush one line.
   */
   void flush_64_as(unsigned int addr, unsigned int endaddr) {}

  /**
   * \internal
   * \fn         void flush_bulk_64_as(unsigned int addr, unsigned int endaddr)
   * \brief      Flushes 32 cache lines at once until end 
   *             address is reached.
   *
   * Will at least flush 32 lines.
   */
   void flush_bulk_64_as(unsigned int addr, unsigned int endaddr) {}

  /**
    * @}
    */

  /**
    * @}
    */

#endif /* DOXYGEN */

/*Header***********************************************************************/

#ifndef DOXYGEN

.text                                  /* enter text section                  */
.align 2                               /* align Code to 2^2 Bytes             */

/* declare labels in here to be global */
.globl enable_cache_as
.globl disable_cache_as
.globl cache_banks_as
.globl cache_sets_as
.globl mem_size_as
.globl invalidate_64_as
.globl invalidate_bulk_64_as
.globl writeback_64_as
.globl writeback_bulk_64_as
.globl flush_64_as
.globl flush_bulk_64_as

/* ParaNut Custom Registers and Instructions */
#include "custom_RV32I.S"

/*Functions********************************************************************/

enable_cache_as:
   fence
   li   t0,      3
   csrs pncache, t0
   ret

/*----------------------------------------------------------------------------*/

disable_cache_as:
   fence
   li   t0,      0
   csrw pncache, t0
   ret

/*----------------------------------------------------------------------------*/

cache_banks_as:
   csrr a0,      pncacheinfo
   srli a0,      a0,      8
   ret

/*----------------------------------------------------------------------------*/

cache_sets_as:
  csrr a0,       pncachesets
  ret

/*----------------------------------------------------------------------------*/

mem_size_as:
  csrr a0,       pnmemsize
  ret

/*----------------------------------------------------------------------------*/

invalidate_64_as:
   fence
invalidate_64_as_loop:
   CINV(10, 0x000)
   addi a0, a0, 8
   blt a0, a1, invalidate_64_as_loop
   ret

/*----------------------------------------------------------------------------*/

invalidate_bulk_64_as:
   fence
invalidate_bulk_64_as_loop:
   CINV(10, 0)
   CINV(10, 8)
   CINV(10, 16)
   CINV(10, 24)
   CINV(10, 32)
   CINV(10, 40)
   CINV(10, 48)
   CINV(10, 56)
   CINV(10, 64)
   CINV(10, 72)
   CINV(10, 80)
   CINV(10, 88)
   CINV(10, 96)
   CINV(10, 104)
   CINV(10, 112)
   CINV(10, 120)
   CINV(10, 128)
   CINV(10, 136)
   CINV(10, 144)
   CINV(10, 152)
   CINV(10, 160)
   CINV(10, 168)
   CINV(10, 176)
   CINV(10, 184)
   CINV(10, 192)
   CINV(10, 200)
   CINV(10, 208)
   CINV(10, 216)
   CINV(10, 224)
   CINV(10, 232)
   CINV(10, 240)
   CINV(10, 248)
   addi a0, a0, 256
   blt  a0, a1, invalidate_bulk_64_as_loop 
   ret

/*----------------------------------------------------------------------------*/

writeback_64_as:
   fence
writeback_64_as_loop:
   CWB(10, 0x000)
   addi a0, a0, 8
   blt a0, a1, writeback_64_as_loop
   ret

/*----------------------------------------------------------------------------*/

writeback_bulk_64_as:
   fence
writeback_bulk_64_as_loop:
   CWB(10, 0)
   CWB(10, 8)
   CWB(10, 16)
   CWB(10, 24)
   CWB(10, 32)
   CWB(10, 40)
   CWB(10, 48)
   CWB(10, 56)
   CWB(10, 64)
   CWB(10, 72)
   CWB(10, 80)
   CWB(10, 88)
   CWB(10, 96)
   CWB(10, 104)
   CWB(10, 112)
   CWB(10, 120)
   CWB(10, 128)
   CWB(10, 136)
   CWB(10, 144)
   CWB(10, 152)
   CWB(10, 160)
   CWB(10, 168)
   CWB(10, 176)
   CWB(10, 184)
   CWB(10, 192)
   CWB(10, 200)
   CWB(10, 208)
   CWB(10, 216)
   CWB(10, 224)
   CWB(10, 232)
   CWB(10, 240)
   CWB(10, 248)
   addi a0, a0, 256
   blt  a0, a1, writeback_bulk_64_as_loop 
   ret

/*----------------------------------------------------------------------------*/

flush_64_as:
   fence
flush_64_as_loop:
   CFLUSH(10, 0x000)
   addi a0, a0, 8
   blt a0, a1, flush_64_as_loop
   ret

/*----------------------------------------------------------------------------*/

flush_bulk_64_as:
   fence
flush_bulk_64_as_loop:
   CFLUSH(10, 0)
   CFLUSH(10, 8)
   CFLUSH(10, 16)
   CFLUSH(10, 24)
   CFLUSH(10, 32)
   CFLUSH(10, 40)
   CFLUSH(10, 48)
   CFLUSH(10, 56)
   CFLUSH(10, 64)
   CFLUSH(10, 72)
   CFLUSH(10, 80)
   CFLUSH(10, 88)
   CFLUSH(10, 96)
   CFLUSH(10, 104)
   CFLUSH(10, 112)
   CFLUSH(10, 120)
   CFLUSH(10, 128)
   CFLUSH(10, 136)
   CFLUSH(10, 144)
   CFLUSH(10, 152)
   CFLUSH(10, 160)
   CFLUSH(10, 168)
   CFLUSH(10, 176)
   CFLUSH(10, 184)
   CFLUSH(10, 192)
   CFLUSH(10, 200)
   CFLUSH(10, 208)
   CFLUSH(10, 216)
   CFLUSH(10, 224)
   CFLUSH(10, 232)
   CFLUSH(10, 240)
   CFLUSH(10, 248)
   addi a0, a0, 256
   blt  a0, a1, flush_bulk_64_as_loop 
   ret

#endif /* !DOXYGEN */

/*EOF**************************************************************************/
